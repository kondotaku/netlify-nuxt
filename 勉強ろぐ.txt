GWなので、何か新しい技術を学んでみようと思い、
かねてより興味を持っていたheadlessCMS + 静的ファイルジェネレータ + というのを使ってみました。
最近のイケイケfrontendは、saasサービスの連携図を載せるのがやってる感だと思います。
ですので、ドヤと掲載します。


## 構成説明
・headlessCMS : 管理画面のみのCMS
　＞ microCMSを使いました。
・静的ジェネレータ：一言でいうとCMSをhtmlにしてくれるMTみたいなもの
　＞ nuxt.jsを使いました。
・静的サーバ：phpとか使えないサーバ
　＞　netlifyを使いました。
管理画面は別の場所にあって、そこを更新すると勝手にサーバにhtmlファイルがアップされるという仕組み。

### nuxt.jsとは
vue.jsに必要機能を盛り込んで、使いやすくなったvueフレームワーク

### microCMSとは
必要最低限の投稿機能を兼ね備えたheadlessCMS

## この構成のメリット
・サーバにはhtmlファイルしか存在しないので表示速度が爆速になる
・管理画面が別の場所にあるので、セキュリティが安全
・gitとサーバが直結しているので、わざわざFTPにアップロードする必要がない

## 構築要件
・CMSで投稿できる
・カテゴリー一覧を作れる
・フォームが動く
→全てなんとかクリアしました。

## 難しかったところ
・vueの独自ルール：storeとルーティング
　・storeというのが、サイトでずっと保持しておくものを格納するようなところ。
　・ルーティングとは、ページファイルとURLを紐づける機能なのかな？
・詳細ページとカテゴリー一覧ページを作る時に独自ルールが存在している
　→　その辺を理解しないと(結局よくわからないけどなんとなくできた)
・フォーム：netlify側のフォーム機能を流用したのだが、
　nuxtとの相性が悪く、一手間加えなければいけなかった。
　
## 良かったところ
・ローカル環境構築がコマンド一発でできるのがすごい。
・nuxtはページファイルを作成したら、勝手にURLの設定なども行ってくれる機能があったのでそこは楽だった。
・記事投稿時の管理画面の更新までの長さがないし、何よりもFTPにわざわざアクセスする必要がないのが良い

## デメリット
・basic認証がない
・開発環境はもう一個作らないといけない
・ビルドに時間がかかって不安だった

## やってみての感想
全く扱ったことのない技術の結集で構築まで行えたので充実感はあった!
vueの機能をもっと深めないと案件として使うには厳しいかなと思った。
　→ storeの機能が特に肝だと思いました
とはいえ、通常のコーポレートなどの何の変哲のないサイトにおいては
十分に構築できて、運用コストはドメイン管理のみでいけちゃうんじゃないかと思うと
スタートアップ系の人にはいいんだろうなと思いました。


## 参考

## micro CMSの設定 / nuxt.jsの設定
https://note.com/ssnozawa/n/n2e4fc2ac6a40
https://qiita.com/isihigameKoudai/items/e3b136e9964f1d30d73d


### 詳細ページ
　https://blog.tack-t.com/posts/create-detail-pages/
　ルールがわからないが、
　_id.vue　ってファイルでなんとかなる

### フォーム
　https://marketing-web.hatenablog.com/entry/nuxt_netlify_form
　ポイントはnetlifyの機能とnuxtがバッティングするので、
　バッティングしない書き方で実装するということ

### カテゴリー
　https://jp.vuejs.org/v2/guide/conditional.html
　ここはだいぶルールに添わず無理やりやった


## 使ってみて




## micro CMSの設定 / nuxt.jsの設定
参考文献
https://note.com/ssnozawa/n/n2e4fc2ac6a40
https://qiita.com/isihigameKoudai/items/e3b136e9964f1d30d73d



## ローカル、起動
$ npm run dev


## MicroCMS からnetlifyに更新通知を出す
microCMSで更新した情報をwebhookを使い更新通知をだすんだなも

### netlify側
 Deploys → Deploy settings →Build hooks → 「add build hook」を押下
 「build hook name」は適当にいれて「save」
 → そうすると,
 build hookのURLが出てくるのでコピー

### MICRO CMS側
 対象のコンテンツを選択
 API設定　→ webhook 
 「＋追加」ボタンを押下し、netlifyを追加
 そして、netlify側で取得したwebhookのURLを設定してあげる

### 同期完了時の注意
 コンテンツを更新しても更新までに少し時間がかかる(5分程度？)ので焦らずまつ


### 詳細ページ
　https://blog.tack-t.com/posts/create-detail-pages/
　ルールがわからないが、
　_id.vue　ってファイルでなんとかなる

### フォーム
　https://marketing-web.hatenablog.com/entry/nuxt_netlify_form
　ポイントはnetlifyの機能とnuxtがバッティングするので、
　バッティングしない書き方で実装するということ

### カテゴリー
　https://jp.vuejs.org/v2/guide/conditional.html
　ここはだいぶルールに添わず無理やりやった